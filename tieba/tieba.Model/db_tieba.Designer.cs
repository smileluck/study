//------------------------------------------------------------------------------
// <auto-generated>
//    此代码是根据模板生成的。
//
//    手动更改此文件可能会导致应用程序中发生异常行为。
//    如果重新生成代码，则将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
namespace tieba.Model
{
    #region 上下文
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    public partial class db_tiebaEntities : ObjectContext
    {
        #region 构造函数
    
        /// <summary>
        /// 请使用应用程序配置文件的“db_tiebaEntities”部分中的连接字符串初始化新 db_tiebaEntities 对象。
        /// </summary>
        public db_tiebaEntities() : base("name=db_tiebaEntities", "db_tiebaEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// 初始化新的 db_tiebaEntities 对象。
        /// </summary>
        public db_tiebaEntities(string connectionString) : base(connectionString, "db_tiebaEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// 初始化新的 db_tiebaEntities 对象。
        /// </summary>
        public db_tiebaEntities(EntityConnection connection) : base(connection, "db_tiebaEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region 分部方法
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet 属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<user> user
        {
            get
            {
                if ((_user == null))
                {
                    _user = base.CreateObjectSet<user>("user");
                }
                return _user;
            }
        }
        private ObjectSet<user> _user;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<notes> notes
        {
            get
            {
                if ((_notes == null))
                {
                    _notes = base.CreateObjectSet<notes>("notes");
                }
                return _notes;
            }
        }
        private ObjectSet<notes> _notes;

        #endregion

        #region AddTo 方法
    
        /// <summary>
        /// 用于向 user EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddTouser(user user)
        {
            base.AddObject("user", user);
        }
    
        /// <summary>
        /// 用于向 notes EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddTonotes(notes notes)
        {
            base.AddObject("notes", notes);
        }

        #endregion

        #region 函数导入
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        /// <param name="id">没有元数据文档可用。</param>
        public ObjectResult<notes> note_all(Nullable<global::System.Guid> id)
        {
            ObjectParameter idParameter;
            if (id.HasValue)
            {
                idParameter = new ObjectParameter("id", id);
            }
            else
            {
                idParameter = new ObjectParameter("id", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<notes>("note_all", idParameter);
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="id">没有元数据文档可用。</param>
        public ObjectResult<notes> note_all(Nullable<global::System.Guid> id, MergeOption mergeOption)
        {
            ObjectParameter idParameter;
            if (id.HasValue)
            {
                idParameter = new ObjectParameter("id", id);
            }
            else
            {
                idParameter = new ObjectParameter("id", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<notes>("note_all", mergeOption, idParameter);
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        /// <param name="id">没有元数据文档可用。</param>
        public int note_del(Nullable<global::System.Guid> id)
        {
            ObjectParameter idParameter;
            if (id.HasValue)
            {
                idParameter = new ObjectParameter("id", id);
            }
            else
            {
                idParameter = new ObjectParameter("id", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("note_del", idParameter);
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        /// <param name="id">没有元数据文档可用。</param>
        /// <param name="title">没有元数据文档可用。</param>
        /// <param name="note">没有元数据文档可用。</param>
        /// <param name="username">没有元数据文档可用。</param>
        /// <param name="timers">没有元数据文档可用。</param>
        public int note_input(Nullable<global::System.Guid> id, global::System.String title, global::System.String note, global::System.String username, global::System.String timers)
        {
            ObjectParameter idParameter;
            if (id.HasValue)
            {
                idParameter = new ObjectParameter("id", id);
            }
            else
            {
                idParameter = new ObjectParameter("id", typeof(global::System.Guid));
            }
    
            ObjectParameter titleParameter;
            if (title != null)
            {
                titleParameter = new ObjectParameter("title", title);
            }
            else
            {
                titleParameter = new ObjectParameter("title", typeof(global::System.String));
            }
    
            ObjectParameter noteParameter;
            if (note != null)
            {
                noteParameter = new ObjectParameter("note", note);
            }
            else
            {
                noteParameter = new ObjectParameter("note", typeof(global::System.String));
            }
    
            ObjectParameter usernameParameter;
            if (username != null)
            {
                usernameParameter = new ObjectParameter("username", username);
            }
            else
            {
                usernameParameter = new ObjectParameter("username", typeof(global::System.String));
            }
    
            ObjectParameter timersParameter;
            if (timers != null)
            {
                timersParameter = new ObjectParameter("timers", timers);
            }
            else
            {
                timersParameter = new ObjectParameter("timers", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("note_input", idParameter, titleParameter, noteParameter, usernameParameter, timersParameter);
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        /// <param name="id">没有元数据文档可用。</param>
        /// <param name="note">没有元数据文档可用。</param>
        public int note_updata(Nullable<global::System.Guid> id, global::System.String note)
        {
            ObjectParameter idParameter;
            if (id.HasValue)
            {
                idParameter = new ObjectParameter("id", id);
            }
            else
            {
                idParameter = new ObjectParameter("id", typeof(global::System.Guid));
            }
    
            ObjectParameter noteParameter;
            if (note != null)
            {
                noteParameter = new ObjectParameter("note", note);
            }
            else
            {
                noteParameter = new ObjectParameter("note", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("note_updata", idParameter, noteParameter);
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        /// <param name="id">没有元数据文档可用。</param>
        /// <param name="username">没有元数据文档可用。</param>
        /// <param name="password">没有元数据文档可用。</param>
        /// <param name="phoneMail">没有元数据文档可用。</param>
        public int user_register(Nullable<global::System.Guid> id, global::System.String username, global::System.String password, global::System.String phoneMail)
        {
            ObjectParameter idParameter;
            if (id.HasValue)
            {
                idParameter = new ObjectParameter("id", id);
            }
            else
            {
                idParameter = new ObjectParameter("id", typeof(global::System.Guid));
            }
    
            ObjectParameter usernameParameter;
            if (username != null)
            {
                usernameParameter = new ObjectParameter("username", username);
            }
            else
            {
                usernameParameter = new ObjectParameter("username", typeof(global::System.String));
            }
    
            ObjectParameter passwordParameter;
            if (password != null)
            {
                passwordParameter = new ObjectParameter("password", password);
            }
            else
            {
                passwordParameter = new ObjectParameter("password", typeof(global::System.String));
            }
    
            ObjectParameter phoneMailParameter;
            if (phoneMail != null)
            {
                phoneMailParameter = new ObjectParameter("phoneMail", phoneMail);
            }
            else
            {
                phoneMailParameter = new ObjectParameter("phoneMail", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("user_register", idParameter, usernameParameter, passwordParameter, phoneMailParameter);
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        /// <param name="username">没有元数据文档可用。</param>
        /// <param name="password">没有元数据文档可用。</param>
        public ObjectResult<Nullable<global::System.Int32>> user_login(global::System.String username, global::System.String password)
        {
            ObjectParameter usernameParameter;
            if (username != null)
            {
                usernameParameter = new ObjectParameter("username", username);
            }
            else
            {
                usernameParameter = new ObjectParameter("username", typeof(global::System.String));
            }
    
            ObjectParameter passwordParameter;
            if (password != null)
            {
                passwordParameter = new ObjectParameter("password", password);
            }
            else
            {
                passwordParameter = new ObjectParameter("password", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int32>>("user_login", usernameParameter, passwordParameter);
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectResult<notes> note_title()
        {
            return base.ExecuteFunction<notes>("note_title");
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        /// <param name="mergeOption"></param>
        public ObjectResult<notes> note_title(MergeOption mergeOption)
        {
            return base.ExecuteFunction<notes>("note_title", mergeOption);
        }

        #endregion

    }

    #endregion

    #region 实体
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="db_tiebaModel", Name="notes")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class notes : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 notes 对象。
        /// </summary>
        /// <param name="id">id 属性的初始值。</param>
        /// <param name="title">title 属性的初始值。</param>
        /// <param name="note">note 属性的初始值。</param>
        /// <param name="author">author 属性的初始值。</param>
        /// <param name="timerss">timerss 属性的初始值。</param>
        public static notes Createnotes(global::System.Guid id, global::System.String title, global::System.String note, global::System.String author, global::System.String timerss)
        {
            notes notes = new notes();
            notes.id = id;
            notes.title = title;
            notes.note = note;
            notes.author = author;
            notes.timerss = timerss;
            return notes;
        }

        #endregion

        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Guid _id;
        partial void OnidChanging(global::System.Guid value);
        partial void OnidChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String title
        {
            get
            {
                return _title;
            }
            set
            {
                OntitleChanging(value);
                ReportPropertyChanging("title");
                _title = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("title");
                OntitleChanged();
            }
        }
        private global::System.String _title;
        partial void OntitleChanging(global::System.String value);
        partial void OntitleChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String note
        {
            get
            {
                return _note;
            }
            set
            {
                OnnoteChanging(value);
                ReportPropertyChanging("note");
                _note = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("note");
                OnnoteChanged();
            }
        }
        private global::System.String _note;
        partial void OnnoteChanging(global::System.String value);
        partial void OnnoteChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String author
        {
            get
            {
                return _author;
            }
            set
            {
                OnauthorChanging(value);
                ReportPropertyChanging("author");
                _author = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("author");
                OnauthorChanged();
            }
        }
        private global::System.String _author;
        partial void OnauthorChanging(global::System.String value);
        partial void OnauthorChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String timerss
        {
            get
            {
                return _timerss;
            }
            set
            {
                OntimerssChanging(value);
                ReportPropertyChanging("timerss");
                _timerss = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("timerss");
                OntimerssChanged();
            }
        }
        private global::System.String _timerss;
        partial void OntimerssChanging(global::System.String value);
        partial void OntimerssChanged();

        #endregion

    
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="db_tiebaModel", Name="user")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class user : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 user 对象。
        /// </summary>
        /// <param name="id">id 属性的初始值。</param>
        /// <param name="username">username 属性的初始值。</param>
        /// <param name="password">password 属性的初始值。</param>
        /// <param name="phoneMail">phoneMail 属性的初始值。</param>
        public static user Createuser(global::System.Guid id, global::System.String username, global::System.String password, global::System.String phoneMail)
        {
            user user = new user();
            user.id = id;
            user.username = username;
            user.password = password;
            user.phoneMail = phoneMail;
            return user;
        }

        #endregion

        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Guid _id;
        partial void OnidChanging(global::System.Guid value);
        partial void OnidChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String username
        {
            get
            {
                return _username;
            }
            set
            {
                OnusernameChanging(value);
                ReportPropertyChanging("username");
                _username = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("username");
                OnusernameChanged();
            }
        }
        private global::System.String _username;
        partial void OnusernameChanging(global::System.String value);
        partial void OnusernameChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String password
        {
            get
            {
                return _password;
            }
            set
            {
                OnpasswordChanging(value);
                ReportPropertyChanging("password");
                _password = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("password");
                OnpasswordChanged();
            }
        }
        private global::System.String _password;
        partial void OnpasswordChanging(global::System.String value);
        partial void OnpasswordChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String phoneMail
        {
            get
            {
                return _phoneMail;
            }
            set
            {
                OnphoneMailChanging(value);
                ReportPropertyChanging("phoneMail");
                _phoneMail = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("phoneMail");
                OnphoneMailChanged();
            }
        }
        private global::System.String _phoneMail;
        partial void OnphoneMailChanging(global::System.String value);
        partial void OnphoneMailChanged();

        #endregion

    
    }

    #endregion

    
}
